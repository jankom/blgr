#!/usr/bin/python

MEMO = {} #we memoize templates

from BeautifulSoup import BeautifulSoup
import unicodedata, pickle, datetime, re, os, errno, sys
from setup import SETUP

def add_blogpost(cont):
	posts = pickle.load(open("posts.pickled"))
	if cont: posts.insert(0, make_blogpost(cont))
	update_index(posts, "index.html")
	update_index(posts, "feed.rss")
	pickle.dump(posts, open("posts.pickled", "w"))
	
#post

def make_blogpost(post):
	title, content = get_title_content(post)
	t = datetime.datetime.now()
	r = { "title": title, "slug": get_slug(title), "year": t.year, 
	      'month': t.month, 'day': t.day, 'hour': t.hour, 'minute': t.minute, 'content': content.decode("utf-8") }
	dir = "../%(year)s/%(month)s/" % r;
	assure_dir(dir);
	open(dir+r["slug"]+'.html', 'w').write(gen_post_page(post, title).encode("utf-8"))
	return r

def gen_post_page(post, title):
	return templatize("header", dict(SETUP, **{"title": title})) + \
		"<!--content-->" + post + "<!--/content-->" + \
		templatize("footer", SETUP)

def get_title_content(data):
	s = BeautifulSoup(data)
	t = s.find('h2')
	t.extract()
	return (t.renderContents(), s.renderContents())

def assure_dir(dir):
	try:
		os.makedirs(dir)
	except OSError, e:
		if e.errno != errno.EEXIST:
			raise

#index

def update_index(posts, f):
	open("../"+f, "w").write(gen_index(posts, f.split(".")[0]).encode("utf-8"))

def gen_index(posts, tpl):
	return templatize(tpl+"-header", SETUP) + \
		gen_index_list(posts, tpl) + \
		templatize(tpl+"-footer", SETUP)

def gen_index_list(posts, tpl):
	return reduce(lambda acc, post: acc + templatize(tpl+"-posts", dict(SETUP, **post)), posts, "")

#tpl

def templatize(tpl, data):
	return get_tpl(tpl) % data

def get_tpl(name):
	return MEMO['tpl'+name] if name in MEMO else load_tpl(name)

def load_tpl(name):
	MEMO['tpl'+name] = r = open("../templates/%(template)s/%(tplname)s.html" % dict(SETUP, **{"tplname": name })).read()
	return r

#util

def get_slug(value):
	_slugify_strip_re = re.compile(r'[^\w\s-]')
	_slugify_hyphenate_re = re.compile(r'[-\s]+')
	if not isinstance(value, unicode):
		value = unicode(value)
	value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore')
	value = unicode(_slugify_strip_re.sub('', value).strip().lower())
	return _slugify_hyphenate_re.sub('-', value)


if __name__ == "__main__":
	inp = None
	if len(sys.argv) > 1:
		if sys.argv[1] == "-r": 
			inp = 0 ; print "Regenerating the blog."
		else:
			print "usage: -r to regen blog, pipe blogpost in to add new."
	else:
		inp = sys.stdin.read()
		
	if inp != None:
		add_blogpost(inp.decode("utf-8"))
		     
